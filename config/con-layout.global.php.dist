<?php
use \ConLayout\Updater\LayoutUpdaterInterface;
return [
    'con-layout' => [
        /**
         * paths where to search for layout updates
         *
         * see README.md for adding new areas
         *
         * format & examples: [
         *      'global' => [
         *          './themes/my-theme/layout/global'
         *      ],
         *      'frontend' => [
         *          './themes/my-theme/layout/frontend'
         *      ],
         *      'backend' => [
         *          ./'themes/admin-theme/layout',
         *          __DIR__ . '/../layout/backend' // in a module.config.php
         *      ]
         *  ]
         */
        'layout_update_paths' => [
            LayoutUpdaterInterface::AREA_GLOBAL => []
        ],
        /**
         * allowed config types
         *
         * you can explicitly disable an extension by setting its value to false
         *
         *  'layout_update_extensions' => [
         *      'xml' => false,
         *      'php',
         *      'yaml'
         *  ]
         *
         * @see http://framework.zend.com/manual/current/en/modules/zend.config.reader.html
         */
        'layout_update_extensions' => [
            'php'
        ],
        'default_area' => LayoutUpdaterInterface::AREA_DEFAULT,
        /**
         * Array of controller namespace -> action handle mappings. Assuming that the setting
         * 'prefer_route_match_controller' is set to 'false' and the controller fully qualified
         * class name is 'FooBar\Controller\IndexController::test'.
         *
         *  'controller_map' => [
         *      'FooBar' => 'custom-handle'
         *  ]
         *
         * The action handles injected would be:
         *
         *  'default'
         *  'custom-handle'
         *  'custom-handle/index'
         *  'custom-handle/index/test'
         *
         * Instead of:
         *
         *  'default'
         *  'foo-bar'
         *  'foo-bar/index'
         *  'foo-bar/index/test'
         */
        'controller_map' => [

        ],
        /**
         * Whether to force the use of the route match controller param.
         */
        'prefer_route_match_controller' => true,
        /**
         * base dir to assets
         *
         * is used by ConLayout\AssetPreparer\CacheBuster to read the file
         * and appends an md5 query string so that browsers always pull the
         * latest asset from the server
         */
        'cache_buster_internal_base_dir' => './public',
        /**
         * block defaults
         */
        'block_defaults' => [
            'capture_to' => 'content',
            'append'     => true,
            'class'      => 'Zend\View\Model\ViewModel',
            'options'    => [],
            'variables'  => [],
            'template'   => '',
            'actions'    => []
        ],
        /**
         * available view helpers for view_helpers-instructions
         */
        'view_helpers' => [
            'doctype' => [],
            'headLink' => [
                'default_method' => 'appendStylesheet',
                'default_param_name' => 'href',
                'prepare_params' => [
                    'href' => true
                ],
                'proxy' => 'ConLayout\View\Helper\Proxy\HeadLinkProxy'
            ],
            'headScript' => [
                'default_method' => 'appendFile',
                'default_param_name' => 'src',
                'prepare_params' => [
                    'src' => true
                ],
                'proxy' => 'ConLayout\View\Helper\Proxy\HeadScriptProxy'
            ],
            'inlineScript' => [
                'default_method' => 'appendFile',
                'default_param_name' => 'src',
                'prepare_params' => [
                    'src' => true
                ],
                'proxy' => 'ConLayout\View\Helper\Proxy\InlineScriptProxy'
            ],
            'headTitle' => [
                'default_method' => 'append',
                'default_param_name' => 'value',
                'proxy' => 'ConLayout\View\Helper\Proxy\HeadTitleProxy'
            ],
            'headMeta' => [
                'default_method' => 'appendName',
                'proxy' => 'ConLayout\View\Helper\Proxy\HeadMetaProxy'
            ],
            'bodyClass' => [
                'default_method' => 'addClass',
                'default_param_name' => 'class'
            ]
        ],
        /**
         * values of view_helpers instructions are prepared before they are
         * passed to the helper.
         *
         * You can create your own preparer by implementing
         * ConLayout\AssetPreparer\AssetPreparerInterface or disable with
         * value false:
         *
         * 'headLink' => [
         *      'basePath' => false,
         *      'myPreparer' => 'Acme\AssetPreparer\MyPreparer'
         *  ]
         */
        'asset_preparers' => [
            'headLink' => [
                'basePath' => 'ConLayout\AssetPreparer\BasePath',
                'cacheBuster' => 'ConLayout\AssetPreparer\CacheBuster',
            ],
            'headScript' => [
                'basePath' => 'ConLayout\AssetPreparer\BasePath',
                'cacheBuster' => 'ConLayout\AssetPreparer\CacheBuster',
            ],
            'inlineScript' => [
                'basePath' => 'ConLayout\AssetPreparer\BasePath',
                'cacheBuster' => 'ConLayout\AssetPreparer\CacheBuster',
            ]
        ],
        /**
         * enable/disable particular listeners
         */
        /*
        'listeners' => [
            'ConLayout\Listener\ActionHandlesListener'  => true,
            'ConLayout\Listener\LayoutUpdateListener'   => true,
            'ConLayout\Listener\LoadLayoutListener'     => true,
            'ConLayout\Listener\LayoutTemplateListener' => true,
            'ConLayout\Listener\ViewHelperListener'     => true,
            'ConLayout\Listener\PrepareActionViewModelListener' => true
        ]*/
    ]
];
